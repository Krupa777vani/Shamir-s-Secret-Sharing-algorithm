import org.json.JSONObject;
import java.math.BigInteger;
import java.nio.file.*;
import java.util.*;

public class SecretSolver {
    public static void main(String[] args) throws Exception {
        // Read file
        String jsonContent1 = Files.readString(Path.of("testcase1.json"));
        String jsonContent2 = Files.readString(Path.of("testcase2.json"));

        System.out.println("Secret 1: " + findSecret(jsonContent1));
        System.out.println("Secret 2: " + findSecret(jsonContent2));
    }

    static BigInteger findSecret(String jsonString) {
        JSONObject obj = new JSONObject(jsonString);
        int k = obj.getJSONObject("keys").getInt("k");

        List<BigInteger> xList = new ArrayList<>();
        List<BigInteger> yList = new ArrayList<>();

        for (String key : obj.keySet()) {
            if (key.equals("keys")) continue;
            if (xList.size() >= k) break;

            int x = Integer.parseInt(key);
            JSONObject point = obj.getJSONObject(key);
            int base = Integer.parseInt(point.getString("base"));
            BigInteger y = new BigInteger(point.getString("value"), base);

            xList.add(BigInteger.valueOf(x));
            yList.add(y);
        }

        return lagrangeInterpolationAtZero(xList, yList);
    }

    static BigInteger lagrangeInterpolationAtZero(List<BigInteger> x, List<BigInteger> y) {
        BigInteger result = BigInteger.ZERO;
        int k = x.size();

        for (int j = 0; j < k; j++) {
            BigInteger numerator = BigInteger.ONE;
            BigInteger denominator = BigInteger.ONE;

            for (int m = 0; m < k; m++) {
                if (m == j) continue;
                numerator = numerator.multiply(x.get(m).negate());
                denominator = denominator.multiply(x.get(j).subtract(x.get(m)));
            }

            BigInteger term = y.get(j).multiply(numerator).divide(denominator);
            result = result.add(term);
        }

        return result;
    }
}
